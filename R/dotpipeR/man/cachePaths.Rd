\name{cachePaths}
\alias{cachePaths}
\title{Get the filesystem paths of cache files for a pipeline}
\description{Get the filesystem paths of cache files generated by a given cache method for a pipeline or a subset of its nodes}
\usage{
cachePaths(pipeline, nodes=get_nodes(pipeline), cacheMethod=cacheMethodDigest, cachedir=tempdir(), run.preprocessor=TRUE, overrides=list(...), context=digest(overrides), envir=globalenv(), ...)
}
\arguments{
  \item{pipeline}{An object of class Pipeline, such as a Pipeline generated by read.Pipeline.}
  \item{nodes}{A character vector of elements from nodes(pipeline), specifying the nodes for which cache paths should be linked.}
  \item{cacheMethod}{A function object that provides a method for mapping nodes to caching paths, such as cacheMatchDigest.}
  \item{cachedir}{A character vector giving a directory to relative to which cached data files are resolved. The default value will use the R per-session temporary directory, which will not resolve the locations of cache files that will persist across R sessions.} 
  \item{run.preprocessor}{A logical value, indicating whether the preprocessing code from the pipeline should be run before evaluating the first node}
  \item{context}{Any R object that will be used by cacheMethod to distinguish between different contexts in which the pipeline might be run. By default, this will be a digest of the overrides.}
  \item{overrides}{A list whose names gives nodes in the Pipeline whose values will be set to the values of the corresponding list elements instead of being evaluated the normal way, in order to replicate the behavior of pipeline evaluation with overridden nodes. See eval.Pipeline.}
  \item{envir}{An environment where the pipeline's preprocessor code will be evaluated, and which will be used to search for functions used in the evaluation of nodes.}
  \item{...}{By default, additional arguments are used to override the values of nodes, i.e. overrides is set to the list of name-value pairs matched to ... .}
}
\value{
  A character vector containing the filesystem paths generated by the cache method for each node.
}
\details{
  This function runs the cache method on each node and returns a character vector of the file paths generated.
}
\author{Christopher Durden}
\keyword{pipeline}
\seealso{cacheMethodDigest}
\examples{

dotfile <- system.file("extdata", "hello_world.dot", package="dotpipeR")
pipeline = read.Pipeline(dotfile)
pipeline = eval.Pipeline(pipeline,cachedir=tempdir())

# create a gzipped tar archive with pipeline's cached files
cache_files = cachePaths(pipeline,cachedir=tempdir())
setwd(unique(dirname(cache_files)))
val = tar("pipeline_Rdata.tar.gz",files=basename(cache_files),compression="gzip",tar="/bin/tar")

# create symbolic links from the cached data files saved with the cacheMethodDigest method to the file paths generated by the cacheMethodPipelineDigest method
\dontrun{
mapply(file.symlink,cache_files,cachePaths(pipeline,cacheMethod=cacheMethodPipelineDigest,cachedir=tempdir()))
}

}
